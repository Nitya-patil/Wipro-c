Create a base class Shape with a pure virtual function draw() that has no implementation. Derive classes Square, Circle, and Triangle from Shape. Each derived class should override draw() to provide its specific drawing behavior (e.g., printing "" for square, "OOO" for circle, etc.). Write a function printShape(Shape* shape) that takes a base class pointer and calls draw() on it. Demonstrate polymorphism by creating objects of the derived classes, storing them in a Shape* array, and calling printShape() on each element.

#include<iostream>
using namespace std;

class Shape{
    public : 
        virtual void display(){
            
        }
};
class Rectangle : public Shape{
    public : 
        void display(){
            std::cout << "*" << std::endl;
        }
};
class Circle : public Shape{
    public : 
        void display(){
            std::cout << "OOO" << std::endl;
        }
};
class Triangle : public Shape{
    public : 
        void display(){
            std::cout << "/_|" << std::endl;
        }
};

int main(){
    Shape *s1;
    Rectangle rec ;
    s1 = &rec;
    s1->display();
    
    Circle cir;
    Triangle tri;
    
    s1 = &cir;
    s1->display();
    
    s1 = &tri;
    s1->display();
}
