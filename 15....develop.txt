Develop a C++ program that allows users to enter and store contact details (name, phone number, email) in a map. The program should provide options for adding new contacts, searching for existing contacts, and displaying all storedÂ contacts.

#include <iostream>
#include <map>
#include <string>

// Define a struct to store contact details
struct Contact {
    std::string phone;
    std::string email;
};

// Function prototypes
void addContact(std::map<std::string, Contact>& contacts);
void searchContact(const std::map<std::string, Contact>& contacts);
void displayContacts(const std::map<std::string, Contact>& contacts);

int main() {
    std::map<std::string, Contact> contacts;
    int choice;

    while (true) {
        std::cout << "\nContact Management System\n";
        std::cout << "1. Add New Contact\n";
        std::cout << "2. Search Contact\n";
        std::cout << "3. Display All Contacts\n";
        std::cout << "4. Exit\n";
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case 1:
                addContact(contacts);
                break;
            case 2:
                searchContact(contacts);
                break;
            case 3:
                displayContacts(contacts);
                break;
            case 4:
                std::cout << "Exiting...\n";
                return 0;
            default:
                std::cout << "Invalid choice. Please try again.\n";
        }
    }

    return 0;
}

void addContact(std::map<std::string, Contact>& contacts) {
    std::string name, phone, email;

    std::cout << "Enter name: ";
    std::cin.ignore();
    std::getline(std::cin, name);
    std::cout << "Enter phone number: ";
    std::getline(std::cin, phone);
    std::cout << "Enter email: ";
    std::getline(std::cin, email);

    contacts[name] = {phone, email};
    std::cout << "Contact added successfully.\n";
}

void searchContact(const std::map<std::string, Contact>& contacts) {
    std::string name;

    std::cout << "Enter name to search: ";
    std::cin.ignore();
    std::getline(std::cin, name);

    auto it = contacts.find(name);
    if (it != contacts.end()) {
        std::cout << "Name: " << it->first << "\n";
        std::cout << "Phone: " << it->second.phone << "\n";
        std::cout << "Email: " << it->second.email << "\n";
    } else {
        std::cout << "Contact not found.\n";
    }
}

void displayContacts(const std::map<std::string, Contact>& contacts) {
    if (contacts.empty()) {
        std::cout << "No contacts to display.\n";
        return;
    }

    for (const auto& contact : contacts) {
        std::cout << "Name: " << contact.first << "\n";
        std::cout << "Phone: " << contact.second.phone << "\n";
        std::cout << "Email: " << contact.second.email << "\n";
        std::cout << "--------------------------\n";
    }
}
